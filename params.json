{"name":"Njet-routing","tagline":"Routing for njet","body":"njet-routing [![Build Status](https://travis-ci.org/dariuszp/njet-routing.png?branch=master)](https://travis-ci.org/dariuszp/njet-routing)\r\n===\r\n\r\n\r\n\r\n###REQUEST METHODS\r\n\r\n```JavaScript\r\nvar njetRouting = require('njet-routing'),\r\n    router = njetRouting.createRouter();\r\n```\r\n\r\nYou can use following methods methods:\r\n- get\r\n- post\r\n- put\r\n- delete\r\n- options\r\n- head\r\n- trace\r\n- connect\r\n- any (custom, when request method is not specified)\r\n\r\n\r\n\r\n###ADD ROUTE\r\n\r\nTo add route for any verb use *router.{method}.add()* like this:\r\n\r\n```JavaScript\r\nrouter.post.add('create_user', '/user/{type}')\r\n```\r\n\r\nwhere type is variable passed by user. Default regexp for any variable is ([^/]+).\r\nVariable can have default value. Define it like this:\r\n\r\n```JavaScript\r\nrouter.post.add('create_user', '/user/{type | super me}')\r\n```\r\n\r\nIf you need specific pattern for \"type\", add it to third parameter - requirements:\r\n```JavaScript\r\nrouter.post.add('create_user', '/user/{type | super me}', {\r\n    type: '[a-z]+'\r\n})\r\n```\r\n\r\n*Remember*, default value will be trimmed to \"super me\" and it will be not affected by provided requirement for type.\r\n\r\nNow if \"type\" is not provided when generating url, default value will be \"super me\".\r\n\r\nAlso, each route can carry data object. For example while registering route, you want to keep some informations,\r\nlike controller name that should handle request or anything like that. If you want to have that information,\r\nsimply add 4th parameter to .add() method like this:\r\n\r\n```JavaScript\r\nrouter.post.add('create_user', '/user/{type | super me}', {\r\n    type: '[a-z]+'\r\n}, {\r\n    myControllerName: 'MySuperController',\r\n    myActionName: 'CoolAction',\r\n    randomStuff: 'my dog name is Cesar'\r\n})\r\n```\r\n\r\n\r\n\r\n###GET ROUTE\r\n\r\nTo retreive route, use get() method:\r\n\r\n```JavaScript\r\nvar route = router.post.get('create_user')\r\n```\r\n\r\nYou will have full object with all data you provided so far.\r\n\r\n\r\n\r\n###GENERATE PATH\r\n\r\nTo generate url based on route name and arguments, use:\r\n\r\n```JavaScript\r\nvar route = router.post.generate('create_user', {\r\n    type: 'superman',\r\n    age: 26\r\n})\r\n```\r\n\r\nAny unused parameter will be added to url as query string. In this specific case it will be like this:\r\n\r\n```\r\n/user/superman?age=26\r\n```\r\n\r\nIf type is omitted while default parameter is defined, default parameter will be used.\r\nDefault argument is add as alternative to regexp in requirements so both will always match.\r\n\r\nIf you need absolute url, set third argument to true:\r\n```JavaScript\r\nvar route = router.post.generate('create_user', {\r\n    type: 'superman',\r\n    age: 26\r\n}, true)\r\n```\r\n\r\nThis will generate:\r\n```\r\nhttp://localhost/user/superman?age=26\r\n```\r\n\r\nRemember that all arguments added to query string are sorted alphabetically so order on argument list does not matter.\r\n\r\nTo change scheme, base url or host, use:\r\n- setHost()\r\n- setScheme()\r\n- setBaseUrl()\r\n- setPort()\r\n\r\nLike this:\r\n```JavaScript\r\nrouter.setScheme('https').setHost('dariuszp.com').setBaseUrl('my/new');\r\nvar route = router.post.generate('create_user', {\r\n    type: 'superman',\r\n    age: 26\r\n}, true)\r\n```\r\n\r\nThis will generate:\r\n```\r\nhttps://dariuszp.com/my/new/user/superman?age=26\r\n```\r\n\r\nAd port as 4th parameter in case you want to change port for just this route:\r\n\r\n```JavaScript\r\nrouter.post.generate('create_user', {\r\n    type: 'superman',\r\n    age: 26\r\n}, true, 8983);\r\n```\r\n\r\nThis will generate:\r\n```\r\nhttps://dariuszp.com:8983/my/new/user/superman?age=26\r\n```\r\n\r\nDefault port 80 is never added to route for obvious reasons. If You want port to be always visible, you can force it:\r\n```\r\n.forcePortInUrl(true)\r\n```\r\n\r\nAlso if all your routes should have custom port, simply use:\r\n```\r\n.setPort(8983); // for example port 8983\r\n```\r\n\r\n\r\n\r\n###MATCHING\r\n\r\nTo find out if your path match any route, use match for any method (verbs):\r\n\r\n```JavaScript\r\nrouter.post.match('/user/superman?age=26');\r\n```\r\n\r\n.match() return either false or result object. Result object have properties:\r\n- route - route object\r\n- routeParams - route in path extracted from given pattern\r\n- queryParams - params from query string\r\n- params - all params but *be aware* that if route param name match query param name, route param takes priority\r\n\r\nBy aware that match will check either specific verb routes or all routes. ANY is just another group of routes.\r\nMatching will not check any at any point. Programmer need to do it himself/herself.\r\n\r\n\r\n\r\n###DEBUGGING\r\n\r\nTo get all routes, use .dump(method = false, byName = false) method. Dump accept two arguments:\r\n- method - dump only specific methods\r\n- byName - dump routes with names as keys","google":"UA-49987464-1","note":"Don't delete this file! It's used internally to help with page regeneration."}